[globalOptions]
# Set the input directory map in an absolute path. 
# - The input forcing and parameter directories will be relative to this.

#~ inputDir = /home/graha010/DynQualData/

inputDir    = /depfg/sutan101/data/DynQualData/version_from_Duncan_2023-03-XX/

# Set the output directory in an absolute path.

#~ outputDir   = /scratch/depfg/graha010/DynQualData/output_online_1980-2019/

outputDir   = /scratch/depfg/sutan101/test_DynQualData/output_online_1980-2019/


# Map of clone (must be provided in PCRaster maps): make sure this file is stored locally!
# - spatial resolution and coverage are based on this map:
#~ cloneMap = cloneMaps/RhineMeuse_05min.map
cloneMap    = cloneMaps/global_parallelization/clone_%3s.map

# The area/ landmask of interest:
# If None, area/landmask is limited for cells with ldd value.
#~ landmask = cloneMaps/RhineMeuse_05min.map
landmask    = cloneMaps/global_parallelization/mask_%3s.map


# netcdf attributes for output files:
institution = Department of Physical Geography, Utrecht University
title       = DynQual Output (run coupled with PCR-GLOBWB2)
description = Example setup for Rhine with 5 arc-min resolution, daily timestep (Edward R. Jones)

startTime = 1980-01-01
endTime   = 2019-12-31
# Format: YYYY-MM-DD
# The model runs on the daily time step.

# spinning up options
maxSpinUpsInYears = 0
minConvForTotlSto = 0.5
minConvForSoilSto = 0.5
minConvForGwatSto = 0.5
minConvForChanSto = 0.5

[meteoOptions]
# This section is for providing the meteorological input required for PCR-GLOBWB/DynQual runs
# - Ensure correct units!: precipitation (m day-1); temperature (C), refET (m day-1); cloud cover (%), radiation (W m-2); vapour pressure (hPa)

# Set the forcing temperature and precipitation files (relative to inputDir)
precipitationNC = forcing/pr_W5E5v2.0_1979_20191_mday-1_Rhine.nc
precipitationVarName = pr
precipitationCorrectionFactor=1

temperatureNC   = forcing/tas_W5E5v2.0_1979_2019_C_Rhine.nc
temperatureVarName = tas

# Method to calculate referencePotETP (reference potential evaporation+transpiration)
# options are "Hamon" and "Input" ; If "Input", the netcdf input file must be given
referenceETPotMethod = Input
refETPotFileNC = forcing/epot_W5E5_1979_2019_mday-1_Rhine.nc
referenceETPotVarName = potentialEvaporation

#Set the additional forcing needed for water temperature module (e.g. cloudcover, radiation and vapor pressure files)
cloudcoverNC = forcing/cloudCover_cru_ts3.21_Rhine.nc
radiationNC   =  forcing/rsds_W5E5v2.0_1979_2019_wm-2_Rhine.nc
vaporNC   = forcing/vap_cru_ts3.21_Rhine.nc
annualAvgTNC   =  forcing/tas_W5E5v2.0_1979_2019_annAvg_C_Rhine.nc
sunhoursTable = forcing/sunhoursfrac.tbl

[meteoDownscalingOptions]
# This section is for a 5 arcmin run, for downscaling meteorological forcing at 30 arcmin to 5 arcmin.  
                                                                                                                                  
downscalePrecipitation  = True          
downscaleTemperature    = True          
downscaleReferenceETPot = False                                                                                                                   

# downscaling (based on the digital elevation model):                                                                                                            
# The downscaling will be performed by providing the "cellIds" (meteoDownscaleIds) of lower resolution cells.                                                    
meteoDownscaleIds = forcing/uniqueIds_30min.nc                            
highResolutionDEM = forcing/gtopo05min.nc

# lapse rates:                                                                                                                                                   
temperLapseRateNC = forcing/temperature_slope.nc
precipLapseRateNC = forcing/precipitation_slope.nc                                                                                                                                                   
# downscaling criteria:                                                                                                                     
temperatCorrelNC  = forcing/temperature_correl.nc
precipitCorrelNC  = forcing/precipitation_correl.nc
                                         
[landSurfaceOptions]
# This section is for defining the land surface options, such as water use.

debugWaterBalance = True

numberOfUpperSoilLayers = 2

topographyNC      = landSurface/topography_parameters_05min.nc
soilPropertiesNC  = landSurface/soilProperties5ArcMin.nc

includeIrrigation = True
# if True, there are four land cover types defined: forest,grassland,irrPaddy,irrNonPaddy
# if False, two (natural) land cover types defined: forest,grassland

# netcdf time series for historical expansion of irrigation areas (unit: hectares). 
# Note: The resolution of this map must be consistent with the resolution of cellArea. 
historicalIrrigationArea = waterUse/irrigated_areas_historical_1960-2019_Rhine.nc
irrigationEfficiency     = None

includeDomesticWaterDemand = True
includeIndustryWaterDemand = True
includeLivestockWaterDemand = True

domesticWaterDemandFile  = waterUse/domestic_water_demand_historical_1960-2019_Rhine.nc
industryWaterDemandFile  = waterUse/industry_water_demand_historical_1960-2019_Rhine.nc
livestockWaterDemandFile = waterUse/livestock_water_demand_historical_1961-2019_Rhine.nc

# desalination water supply (maximum/potential/capacity)
desalinationWater = waterUse/desalination_water_Rhine.nc
limitAbstraction = False

# zone IDs (scale) at which ground- surface-water allocation is performed  
allocationSegmentsForGroundSurfaceWater = None

[forestOptions]
name = forest
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC = None 
# If NC file is not provided, we have to provide the following pcraster maps:
fracVegCover      = landSurface/landCover/naturalTall/vegf_tall.nc
minSoilDepthFrac  = landSurface/landCover/naturalTall/minf_tall_permafrost.nc
maxSoilDepthFrac  = landSurface/landCover/naturalTall/maxf_tall.nc
rootFraction1     = landSurface/landCover/naturalTall/rfrac1_tall.nc
rootFraction2     = landSurface/landCover/naturalTall/rfrac2_tall.nc	
maxRootDepth      = 1.0

# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = landSurface/landCover/naturalTall/cropCoefficientForest_Rhine.nc
interceptCapNC    = landSurface/landCover/naturalTall/interceptCapInputForest_Rhine.nc
coverFractionNC   = landSurface/landCover/naturalTall/coverFractionInputForest_Rhine.nc

# initial conditions:
interceptStorIni = initialConditions/interceptStor_forest_2006-12-31.map
snowCoverSWEIni  = initialConditions/snowCoverSWE_forest_2006-12-31.map
snowFreeWaterIni = initialConditions/snowFreeWater_forest_2006-12-31.map
topWaterLayerIni = initialConditions/topWaterLayer_forest_2006-12-31.map
storUppIni       = initialConditions/storUpp_forest_2006-12-31.map
storLowIni       = initialConditions/storLow_forest_2006-12-31.map
interflowIni     = initialConditions/interflow_forest_2006-12-31.map

[grasslandOptions]
name = grassland
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC   = None
# If NC file is not provided, we have to provide the following values:
fracVegCover      = landSurface/landCover/naturalShort/vegf_short.nc
minSoilDepthFrac  = landSurface/landCover/naturalShort/minf_short_permafrost.nc
maxSoilDepthFrac  = landSurface/landCover/naturalShort/maxf_short.nc
rootFraction1     = landSurface/landCover/naturalShort/rfrac1_short.nc
rootFraction2     = landSurface/landCover/naturalShort/rfrac2_short.nc	
maxRootDepth      = 0.5

# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = landSurface/landCover/naturalShort/cropCoefficientGrassland_Rhine.nc
interceptCapNC    = landSurface/landCover/naturalShort/interceptCapInputGrassland_Rhine.nc
coverFractionNC   = landSurface/landCover/naturalShort/coverFractionInputGrassland_Rhine.nc

# initial conditions:
interceptStorIni = initialConditions/interceptStor_grassland_2006-12-31.map
snowCoverSWEIni  = initialConditions/snowCoverSWE_grassland_2006-12-31.map
snowFreeWaterIni = initialConditions/snowFreeWater_grassland_2006-12-31.map
topWaterLayerIni = initialConditions/topWaterLayer_grassland_2006-12-31.map
storUppIni       = initialConditions/storUpp_grassland_2006-12-31.map
storLowIni       = initialConditions/storLow_grassland_2006-12-31.map
interflowIni     = initialConditions/interflow_grassland_2006-12-31.map

[irrPaddyOptions]
name = irrPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

landCoverMapsNC  = None
# If NC file is not provided, we have to provide the following values:
fracVegCover     = landSurface/landCover/irrPaddy/fractionPaddy.nc
minSoilDepthFrac = landSurface/landCover/irrPaddy/minf_paddy_permafrost.nc
maxSoilDepthFrac = landSurface/landCover/irrPaddy/maxf_paddy.nc
rootFraction1    = landSurface/landCover/irrPaddy/rfrac1_paddy.nc
rootFraction2    = landSurface/landCover/irrPaddy/rfrac2_paddy.nc
maxRootDepth     = 0.5

# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
minTopWaterLayer = 0.05
minCropKC        = 0.2
cropDeplFactor   = 0.2
minInterceptCap  = 0.0002

cropCoefficientNC = landSurface/landCover/irrPaddy/Global_CropCoefficientKc-IrrPaddy_Rhine.nc

# initial conditions:
interceptStorIni = initialConditions/interceptStor_irrPaddy_2006-12-31.map
snowCoverSWEIni  = initialConditions/snowCoverSWE_irrPaddy_2006-12-31.map
snowFreeWaterIni = initialConditions/snowFreeWater_irrPaddy_2006-12-31.map
topWaterLayerIni = initialConditions/topWaterLayer_irrPaddy_2006-12-31.map
storUppIni       = initialConditions/storUpp_irrPaddy_2006-12-31.map
storLowIni       = initialConditions/storLow_irrPaddy_2006-12-31.map
interflowIni     = initialConditions/interflow_irrPaddy_2006-12-31.map

[irrNonPaddyOptions]
name = irrNonPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

landCoverMapsNC  = None
# If NC file is not provided, we have to provide the following values:
fracVegCover     = landSurface/landCover/irrNonPaddy/fractionNonPaddy.nc
minSoilDepthFrac = landSurface/landCover/irrNonPaddy/minf_nonpaddy_permafrost.nc
maxSoilDepthFrac = landSurface/landCover/irrNonPaddy/maxf_nonpaddy.nc
rootFraction1    = landSurface/landCover/irrNonPaddy/rfrac1_nonpaddy.nc
rootFraction2    = landSurface/landCover/irrNonPaddy/rfrac2_nonpaddy.nc
maxRootDepth     = 1.0

# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.5

cropCoefficientNC = landSurface/landCover/irrNonPaddy/Global_CropCoefficientKc-IrrNonPaddy_Rhine.nc

# initial conditions:
interceptStorIni = initialConditions/interceptStor_irrNonPaddy_2006-12-31.map
snowCoverSWEIni  = initialConditions/snowCoverSWE_irrNonPaddy_2006-12-31.map
snowFreeWaterIni = initialConditions/snowFreeWater_irrNonPaddy_2006-12-31.map
topWaterLayerIni = initialConditions/topWaterLayer_irrNonPaddy_2006-12-31.map
storUppIni       = initialConditions/storUpp_irrNonPaddy_2006-12-31.map
storLowIni       = initialConditions/storLow_irrNonPaddy_2006-12-31.map
interflowIni     = initialConditions/interflow_irrNonPaddy_2006-12-31.map

[groundwaterOptions]
debugWaterBalance = True

groundwaterPropertiesNC = groundwater/groundwaterProperties5ArcMin.nc
# The file will containspecificYield (m3.m-3), kSatAquifer (m.day-1), recessionCoeff (day-1)
#
# - minimum value for groundwater recession coefficient (day-1) 
minRecessionCoeff = 1.0e-4

# some options for constraining groundwater abstraction
limitFossilGroundWaterAbstraction      = True
estimateOfRenewableGroundwaterCapacity = 0.0
estimateOfTotalGroundwaterThickness    = groundwater/aquifer_thickness_05min.nc
# minimum and maximum total groundwater thickness 
minimumTotalGroundwaterThickness       = 100.
maximumTotalGroundwaterThickness       = None

# annual pumping capacity for each region (unit: billion cubic meter per year), should be given in a netcdf file
pumpingCapacityNC = groundwater/regional_abstraction_limit.nc

# initial conditions:
storGroundwaterIni = initialConditions/storGroundwater_2006-12-31.map
storGroundwaterFossilIni = initialConditions/storGroundwaterFossil_2006-12-31.map
#
# additional initial conditions for pumping behaviors
avgNonFossilGroundwaterAllocationLongIni  = initialConditions/avgNonFossilGroundwaterAllocationLong_2006-12-31.map
avgNonFossilGroundwaterAllocationShortIni = initialConditions/avgNonFossilGroundwaterAllocationShort_2006-12-31.map
avgTotalGroundwaterAbstractionIni         = initialConditions/avgTotalGroundwaterAbstractionIni_2006-12-31.map
avgTotalGroundwaterAllocationLongIni      = initialConditions/avgTotalGroundwaterAllocationLong_2006-12-31.map
avgTotalGroundwaterAllocationShortIni     = initialConditions/avgTotalGroundwaterAllocationShort_2006-12-31.map

# zonal IDs (scale) at which zonal allocation of groundwater is performed  
allocationSegmentsForGroundwater = waterUse/abstraction_zones_30min_05min.nc

[prefactorOptions] 
linear_multiplier_for_refPotET         = 1.0
linear_multiplier_for_degreeDayFactor  = 1.0
linear_multiplier_for_minSoilDepthFrac = 1.0
log_10_multiplier_for_kSat             = 0.0
linear_multiplier_for_storCap          = 1.0
log_10_multiplier_for_recessionCoeff   = 0.0

[routingOptions]
#- This section is for providing the routing options for PCR-GLOBWB/DynQual runs.
#- This section is also for providing pollutant loading options.

#- simplified kinematic wave is the required routing method for DynQual runs!
routingMethod = simplifiedKinematicWave
debugWaterBalance = True

# option for maximum length of a sub time step in seconds (optional and only used if kinematicWave is used)
# - Note that too long sub time step may create water balance errors.
# - Default values: 3600 seconds for 30 arcmin ; 720 seconds for 5 arcmin
maxiumLengthOfSubTimeStep = 720.

# Set offlineRun to False when running DynQual one-way coupled with PCR-GLOBWB. For offline run, use offline .ini file
offlineRun = False

lddMap      = routing/lddsound_05min.nc
cellAreaMap = routing/cellsize05min.nc
gradient    = routing/channel_gradient.nc

# manning coefficient
manningsN   = 0.04

# constant channel characteristics (optional)
constantChannelDepth = routing/bankfull_depth.nc
constantChannelWidth = routing/bankfull_width.nc
minimumChannelWidth  = None

#If None, bankfull capacity estimated from (bankfull) channel depth (m) and width (m) 
bankfullCapacity     = None

# Option for flood plain simulation
dynamicFloodPlain = True
floodplainManningsN= 0.04

# Options for floodplain routing module
relativeElevationFiles = routing/dzRel%04d.nc
relativeElevationLevels = 0.0,0.01,0.05,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00

## Channel properties for flooding
maxChannelCapacity = routing/bankfull_capacity.map
channelDepth       = routing/bankfull_depth.map
channelGradient    = routing/channel_gradient.map
channelLDD         = routing/lddsound_05min.nc

# Smoothing options for floodplain PDF
reductionKK = 0.5
criterionKK = 40.0

# lake and reservoir parameters
waterBodyInputNC       = routing/waterBodies5ArcMin_Rhine.nc
onlyNaturalWaterBodies = False

# composite crop factors for WaterBodies: 
cropCoefficientWaterNC = routing/cropCoefficientForOpenWater.nc
minCropWaterKC         = 1.00

# number of days (timesteps) that have been performed for spinning up initial conditions in the routing module):
timestepsToAvgDischargeIni     = initialConditions/timestepsToAvgDischarge_2006-12-31.map

# initial hydrological conditions:
waterBodyStorageIni              = initialConditions/waterBodyStorage_2006-12-31.map
channelStorageIni                = initialConditions/channelStorage_2006-12-31.map
readAvlChannelStorageIni         = initialConditions/readAvlChannelStorage_2006-12-31.map
avgDischargeLongIni              = initialConditions/avgDischargeLong_2006-12-31.map
avgDischargeShortIni             = initialConditions/avgDischargeShort_2006-12-31.map
m2tDischargeLongIni              = initialConditions/m2tDischargeLong_2006-12-31.map
avgBaseflowLongIni               = initialConditions/avgBaseflowLong_2006-12-31.map
riverbedExchangeIni              = initialConditions/riverbedExchange_2006-12-31.map
avgLakeReservoirInflowShortIni   = initialConditions/avgLakeReservoirInflowShort_2006-12-31.map
avgLakeReservoirOutflowLongIni   = initialConditions/avgLakeReservoirOutflowLong_2006-12-31.map
avg_irrGrossDemandIni            = initialConditions/avg_irrGrossDemand_2006-12-31.map
avg_netLqWaterToSoilIni          = initialConditions/avg_netLqWaterToSoil_2006-12-31.map

# initial condition of sub-time step discharge (needed for estimating number of time steps in kinematic wave methods)
subDischargeIni                  = initialConditions/subDischarge_2006-12-31.map

# Option to enable quality modelling (water temperature, salinity, organic, pathogen) 
quality = True

# Initial conditions for water quality modelling:
waterTemperatureIni = initialConditions/waterTemperature_2006-12-31.map
iceThicknessIni     = initialConditions/iceThickness_2006-12-31.map
routedTDSIni		    = initialConditions/routedTDS_2006-12-31.map
routedBODIni        = initialConditions/routedBOD_2006-12-31.map
routedFCIni         = initialConditions/routedFC_2006-12-31.map

# Powerplant return flows (m3 s-1). For running without powerplants, set to 0.
powerplantNC    =  calc_loadings/PowRF_1980_2019_Rhine.nc

# Option to enable calculation of loads in model run. If calculateLoads is set to true, additional socio-economic data (below) must be provided.
calculateLoads  = True

# Input data for forcing pollutant loadings. Required when calculateLoads is set to False; ignored if calculateLoads is set to True.
TDSloadNC = loadings/TDSload_daily_1980_2019_Rhine.nc
BODloadNC = loadings/BODload_daily_1980_2019_Rhine.nc
FCloadNC  = loadings/FCload_daily_1980_2019_Rhine.nc

# Input data for calculating pollutant loadings, required only when calculateLoads is True.
#- Ensure correct units: Population (capita), factorInd_Man (fraction: 0-1), UrbanFraction (fraction 0-1), LivPopulation (stock)
#- Ensure correct units: Dom_ExcrLoad (g or cfu per capita), Man_EfflConc (mg/L or cfu/100ml), USR_EfflConc (mg/L or cfu/100ml), Liv_ExcrLoad (g or cfu per stock), Irr_EfflConc (mg/L)
PopulationNC    = calc_loadings/Population_1980_2019_Rhine.nc
factorInd_ManNC = calc_loadings/factorInd_Man_Rhine.nc
UrbanFractionNC = calc_loadings/urban_fraction_1970_2010_Rhine.nc
LivPopulationNC = calc_loadings/Liv_Pop_1980_2019_Rhine.nc

Dom_ExcrLoadNC  = calc_loadings/Dom_ExcLoad.nc
Man_EfflConcNC  = calc_loadings/Man_EffConc.nc
USR_EfflConcNC  = calc_loadings/USR_EffConc.nc
Liv_ExcrLoadNC  = calc_loadings/Liv_ExcLoad.nc
Irr_EfflConcNC  = calc_loadings/Irr_EffConc.nc

#Gridded wastewater treatment pathways (fraction 0-1)
#- split between Tertiary, Secondary, Primary, collected untreated, basic sanitation (dom only), open defecation (dom only), direct (man only)
WWtPathwaysNC = calc_loadings/ratio_WWt_Pathways_1980_2015_Rhine.nc

# other constants
#- TDS and TSS in mg/L 
backgroundSalinity = loadings/Background_TDS_05min.nc
TSSmap             = loadings/TSS_2000.map

# water quality initial conditions per sector:
#- if loads per sector is set to True, loadings can also be reported per individual sector. Note: only avaliable when calculateLoads is set to True.
loadsPerSector = True
# Initial conditions for water quality modelling (per sector)
routedDomTDSIni     = initialConditions/routedDomTDS_2006-12-31.map
routedManTDSIni     = initialConditions/routedManTDS_2006-12-31.map
routedUSRTDSIni     = initialConditions/routedUSRTDS_2006-12-31.map
routedIrrTDSIni     = initialConditions/routedIrrTDS_2006-12-31.map
routedDomBODIni     = initialConditions/routedDomBOD_2006-12-31.map
routedManBODIni     = initialConditions/routedManBOD_2006-12-31.map
routedUSRBODIni     = initialConditions/routedUSRBOD_2006-12-31.map
routedintLivBODIni  = initialConditions/routedintLivBOD_2006-12-31.map
routedextLivBODIni  = initialConditions/routedextLivBOD_2006-12-31.map
routedDomFCIni      = initialConditions/routedDomFC_2006-12-31.map
routedManFCIni      = initialConditions/routedManFC_2006-12-31.map
routedUSRFCIni      = initialConditions/routedUSRFC_2006-12-31.map
routedintLivFCIni   = initialConditions/routedintLivFC_2006-12-31.map
routedextLivFCIni   = initialConditions/routedextLivFC_2006-12-31.map

[reportingOptions]
### output files that will be written in the disk in netcdf files:
# ensure that you are only writing out files that are explicity used in your model run congifuration!
# common options for hydrology: baseflow,interflowTotal,directRunoff,discharge,channelStorage
# common options for quality: waterTemp,TDSload,BODload,FCload,routedTDS,routedBOD,routedFC,salinity,organic,pathogen
# common options for loads per sector: Dom_TDSload,Man_TDSload,USR_TDSload,Irr_TDSload,Dom_BODload,Man_BODload,USR_BODload,intLiv_BODload,extLiv_BODload,Dom_FCload,Man_FCload,USR_FCload,intLiv_FCload,extLiv_FCload,routedDomTDS,routedManTDS,routedUSRTDS,routedIrrTDS,routedDomBOD,routedManBOD,routedUSRBOD,routedintLivBOD,routedextLivBOD,routedDomFC,routedManFC,routedUSRFC,routedintLivFC,routedextLivFC

# - daily resolution
outDailyTotNC = baseflow,interflowTotal,directRunoff,discharge,channelStorage,waterTemp,TDSload,BODload,FCload,routedTDS,routedBOD,routedFC,salinity,organic,pathogen,routedDomTDS

# - monthly resolution
outMonthTotNC = None
outMonthAvgNC = baseflow,interflowTotal,directRunoff,discharge,channelStorage,waterTemp,TDSload,BODload,FCload,routedTDS,routedBOD,routedFC,salinity,organic,pathogen
outMonthEndNC = None
outMonthMaxNC = channelStorage,discharge,totalRunoff,routedTDS,routedBOD,routedFC,salinity,organic,pathogen
outAnnuaTotNC = None

# - annual resolution
outAnnuaAvgNC = baseflow,interflowTotal,directRunoff,discharge,channelStorage,waterTemp,TDSload,BODload,FCload,routedTDS,routedBOD,routedFC,salinity,organic,pathogen
outAnnuaEndNC = None
outAnnuaMaxNC = channelStorage,discharge,totalRunoff,routedTDS,routedBOD,routedFC,salinity,organic,pathogen

# netcdf format and zlib setup
formatNetCDF = NETCDF4
zlib = True
